1.mybatis动态sql,让我们在编写sql时，可以借助xml的标签，动态的对sql进行拼接、处理，规避了sql拼接过程中出容易出现的问题，
同时方便开发人员阅读和使用。
mybatis提供了九种动态标签：<if/>、<choose/>、<when/>、<otherwise/>、<trim/>、<where/>、<set/>、<foreach/>、<bind/>
mybatis动态sql执行原理：mybatis执行动态sql时，首先将配置文件加载到输入流，然通过SqlSessionFactoryBuilder构建SqlSessionFactory,
在构建SqlSessionFactory的过程中对xml文件进行解析，SqlSessionFactory创建完后，调用openSession()方法创建sqlSession，
sqlSession调用executor完成对sql的解析、参数的加载及结果返回。

2、mybatis支持延时加载，延迟加载通动态代理的形式实现，通过拦截到指定方法，执行按需加载。

3、mybatis执行器有BatchExecutor、ReuseExecutor、SimpleExecutor,
SimpleExecutor:每执行一次sql操作，就会开启一个statement对象，用完后立刻关闭statement对象；
ReuseExecutor:执行sql时，以sql作为key查找statement对象，存在就使用，不在在就创建，使用完后不关闭statement对象，而是放在map内，供
下一次使用；
BatchExecutor：执行增、删、改操作时，将所有sql都添加到批处理中，统一执行。

4、Mybatis一级、二级缓存底层都是基于PerpetualCache的hashmap的本地缓存，一级缓存的作用范围是
sqlSession级别，二级缓存的作用范围是namespace级别，当sqlSession执行修改操作，并commit、sqlSession.close(),sqlSession.clearCache()
时，一级缓存失效，当某一个作用域执行C/U/D操作时，二级缓存失效

5、mybatis插件类似一个拦截器，对四大对象进行拦截，用于增强核心对象功能，本质上是借助底层动态代理实现
Executor,StatementHandler,ParameterHandler,ResultSetHandler
自定义一个插件，首先要实现Interceptor接口，然后在实现类上加注解@Intercepts,在注解中对拦截哪些接口、方法及方法的参数进行定义，
定义完成后，在sqlMapConfig.xml的<plugin>标签中配置插件的实现类